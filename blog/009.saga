1. call 异步阻塞调用
2. fork 异步非阻塞调用，无阻塞的执行fn，执行fn时，不会暂停Generator
3. put 相当于dispatch，分发一个action;  put.resolve 会阻塞，返回结果
4. select 相当于getState，用于获取store中相应部分的state
5. take 监听action，暂停Generator，匹配的action被发起时，恢复执行。take结合fork，可以实现takeEvery和takeLatest的效果
6. takeEvery 监听action，每监听到一个action，就执行一次操作
7. takeLatest 监听action，监听到多个action，只执行最近的一次
8. cancel 指示 middleware 取消之前的 fork 任务，cancel 是一个无阻塞 Effect。也就是说，Generator 将在取消异常被抛出后立即恢复
9. race 竞速执行多个任务，类似 Promise.rece
10. all 执行多个认为，类似Promise.all
10. throttle 节流